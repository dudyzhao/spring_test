plugins {
    id 'org.springframework.boot' version '2.2.2.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
    id 'maven'
    id 'groovy'
    id 'war'
}

group = 'com.springboot'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

/**
 * 指定所使用的仓库，mavenCentral()表示使用中央仓库，
 * 此刻项目中所需要的jar包都会默认从中央仓库下载到本地指定目录
 * 配置mavenLocal()表示引入jar包的时候，先从本地仓库中找，没有再去中央仓库下载
 * maven{ url ''} 指定私服地址或其他中央仓库
 */
repositories {
    mavenLocal()
    maven { url 'http://localhost:8081/repository/maven-public/' }
    mavenCentral()
}

/**
 * gradle工程中所有的jar包的坐标都在dependencies属性内放置
 * 每一个jar包的坐标都有三个基本元素组成
 * group , name , version
 * testCompile 表示该jar包在测试的时候起作用，该属性为jar包的作用域
 * compileOnly 表示只有编译时使用
 * 我们在gradle里面添加坐标的时候都要带上jar包的作用域
 */
dependencies {
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.7'
    compile 'commons-io:commons-io:2.3'
    compile 'org.springframework.boot:spring-boot-autoconfigure:2.2.2.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-test:2.2.2.RELEASE'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.5.2'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    providedCompile group: 'org.projectlombok', name: 'lombok', version: '1.18.8'
}

test {
    useJUnitPlatform()
}
/**
 * 发布到maven仓库
 */
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "http://localhost:8081/repository/maven-public/")
        }
    }
}